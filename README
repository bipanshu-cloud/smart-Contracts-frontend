Function Frontend
Creating a frontend for interacting with a smart contract is a common task in decentralized application  development.

DESCRIPTION
Developing a frontend to interact with a smart contract is a fundamental task in decentralized application  development. This process involves 
a few key concepts and steps that bridge the gap between blockchain technology and user-friendly interfaces.For the frontend, we often use React,
a popular JavaScript library for building user interfaces. React's component-based architecture and its ease of integration with web3 libraries 
make it a suitable choice for dApp development

GETTING STARTED
CODE
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleContract {
    uint256 public data1;
    uint256 public data2;
    
    function setData1(uint256 _data) public {
        data1 = _data;
    }
    
    function setData2(uint256 _data) public {
        data2 = _data;
    }
}



JAC// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleContract {
    uint256 public data1;
    uint256 public data2;
    
    function setData1(uint256 _data) public {
        data1 = _data;
    }
    
    function setData2(uint256 _data) public {
        data2 = _data;
    }
}


JAVASCRIPT

async function fetchContractData() {
    const contractAddress = '0xDA0bab807633f07f013f94DD0E6A4F96F8742B53'; // Replace with your contract address
    const abi = [
        {
            "constant": true,
            "inputs": [],
            "name": "data1",
            "outputs": [{"name": "", "type": "uint256"}],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "data2",
            "outputs": [{"name": "", "type": "uint256"}],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }
    ];

    // Check if the browser has injected the Ethereum provider (MetaMask)
    if (typeof window.ethereum !== 'undefined' || (typeof window.web3 !== 'undefined')) {
        const provider = new ethers.providers.Web3Provider(window.ethereum);

        try {
            console.log('Requesting account access...');
            // Request account access if needed
            await provider.send("eth_requestAccounts", []);
            console.log('Account access granted.');

            const contract = new ethers.Contract(contractAddress, abi, provider);

            console.log('Fetching data from contract...');
            // Fetch data from the contract
            const result1 = await contract.data1();
            const result2 = await contract.data2();

            console.log('Data fetched:', result1.toString(), result2.toString());

            document.getElementById('data1').innerText = result1.toString();
            document.getElementById('data2').innerText = result2.toString();
        } catch (error) {
            console.error('Error fetching data:', error);
            document.getElementById('data1').innerText = 'Error';
            document.getElementById('data2').innerText = 'Error';
        }
    } else {
        console.error('No Ethereum provider found. Install MetaMask.');
        document.getElementById('data1').innerText = 'No provider found';
        document.getElementById('data2').innerText = 'No provider found';
    }
}

window.onload = fetchContractData;

